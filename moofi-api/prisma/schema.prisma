// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model User {
  id            String  @id @default(uuid())
  name          String
  email         String  @unique
  password      String
  hash          String
  salt          String
  balance       Decimal @db.Decimal(9, 2)
  indexKey      BigInt  @default(autoincrement()) @map("index_key")
  walletAddress String? @unique @map("wallet_address")
  role          String  @default("producer")

  orders      Order[]
  milking     Milking[]
  deposit     Deposit[]
  withdraw    Withdraw[]
  milkMachine MilkMachine[]

  orderCheckoutProducer OrderCheckout[] @relation("order_checkout_producer")
  orderCheckoutBuyer    OrderCheckout[] @relation("order_checkout_buyer")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([indexKey])
  @@map("users")
}

model MilkMachine {
  id     String  @id @default(uuid())
  uuid   String
  name   String
  status Boolean

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  milking Milking[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@map("milk_machines")
}

model Milking {
  id     String  @id @default(uuid())
  order  Int
  liters Int
  status String
  txId   String?

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  milkMachineId String      @map("milk_machine_id")
  milkMachine   MilkMachine @relation(fields: [milkMachineId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@index([milkMachineId])
  @@map("milkings")
}

model Order {
  id       String  @id @default(uuid())
  type     String
  price    Decimal @db.Decimal(9, 2)
  quantity Int

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  orderCheckout OrderCheckout?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@map("orders")
}

model OrderCheckout {
  id String @id @default(uuid())

  orderId    String @unique @map("order_id")
  order      Order  @relation(fields: [orderId], references: [id])
  producerId String @map("producer_id")
  producer   User   @relation("order_checkout_producer", fields: [producerId], references: [id])
  buyerId    String @map("buyer_id")
  buyer      User   @relation("order_checkout_buyer", fields: [buyerId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([orderId])
  @@index([producerId])
  @@index([buyerId])
  @@map("order_checkouts")
}

model Withdraw {
  id String @id @default(uuid())

  amount Decimal @db.Decimal(9, 2)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@map("withdraws")
}

model Deposit {
  id String @id @default(uuid())

  amount Decimal @db.Decimal(9, 2)

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([userId])
  @@map("deposits")
}